[{"/Users/imenkedir/dev/web/Spect-AI/src/components/ChatInput.tsx":"1","/Users/imenkedir/dev/web/Spect-AI/src/components/ChatMessage.tsx":"2","/Users/imenkedir/dev/web/Spect-AI/src/components/DisplaySourcePDF.tsx":"3","/Users/imenkedir/dev/web/Spect-AI/src/components/LoadingSpinner.tsx":"4","/Users/imenkedir/dev/web/Spect-AI/src/components/LogOut.tsx":"5","/Users/imenkedir/dev/web/Spect-AI/src/components/Recommendations.tsx":"6","/Users/imenkedir/dev/web/Spect-AI/src/components/ThemeToggle.tsx":"7","/Users/imenkedir/dev/web/Spect-AI/src/components/UploadDocuments.tsx":"8","/Users/imenkedir/dev/web/Spect-AI/src/pages/_app.tsx":"9","/Users/imenkedir/dev/web/Spect-AI/src/pages/api/auth/[...nextauth].ts":"10","/Users/imenkedir/dev/web/Spect-AI/src/pages/api/trpc/[trpc].ts":"11","/Users/imenkedir/dev/web/Spect-AI/src/pages/chat.tsx":"12","/Users/imenkedir/dev/web/Spect-AI/src/pages/index.tsx":"13","/Users/imenkedir/dev/web/Spect-AI/src/server/api/root.ts":"14","/Users/imenkedir/dev/web/Spect-AI/src/server/api/routers/chat.ts":"15","/Users/imenkedir/dev/web/Spect-AI/src/server/api/routers/example.ts":"16","/Users/imenkedir/dev/web/Spect-AI/src/server/api/trpc.ts":"17","/Users/imenkedir/dev/web/Spect-AI/src/server/auth.ts":"18","/Users/imenkedir/dev/web/Spect-AI/src/server/db.ts":"19","/Users/imenkedir/dev/web/Spect-AI/src/types/chat/message.ts":"20","/Users/imenkedir/dev/web/Spect-AI/src/utils/api.ts":"21"},{"size":1544,"mtime":1682847188323,"results":"22","hashOfConfig":"23"},{"size":2972,"mtime":1683096327683,"results":"24","hashOfConfig":"23"},{"size":2389,"mtime":1683095885396,"results":"25","hashOfConfig":"23"},{"size":1374,"mtime":1682847188324,"results":"26","hashOfConfig":"23"},{"size":360,"mtime":1682915625092,"results":"27","hashOfConfig":"23"},{"size":1395,"mtime":1682847188324,"results":"28","hashOfConfig":"23"},{"size":548,"mtime":1682847188324,"results":"29","hashOfConfig":"23"},{"size":1930,"mtime":1682910581886,"results":"30","hashOfConfig":"23"},{"size":601,"mtime":1682847188324,"results":"31","hashOfConfig":"23"},{"size":118,"mtime":1682847188325,"results":"32","hashOfConfig":"23"},{"size":544,"mtime":1682847188325,"results":"33","hashOfConfig":"23"},{"size":4567,"mtime":1683096351568,"results":"34","hashOfConfig":"23"},{"size":2274,"mtime":1682909163051,"results":"35","hashOfConfig":"23"},{"size":469,"mtime":1682847188325,"results":"36","hashOfConfig":"23"},{"size":4721,"mtime":1682913744563,"results":"37","hashOfConfig":"23"},{"size":553,"mtime":1682847188326,"results":"38","hashOfConfig":"23"},{"size":3885,"mtime":1682847188326,"results":"39","hashOfConfig":"23"},{"size":1949,"mtime":1682847188326,"results":"40","hashOfConfig":"23"},{"size":407,"mtime":1682847188326,"results":"41","hashOfConfig":"23"},{"size":173,"mtime":1682848332924,"results":"42","hashOfConfig":"23"},{"size":2103,"mtime":1682847188326,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1djkv4h",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/imenkedir/dev/web/Spect-AI/src/components/ChatInput.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/ChatMessage.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/DisplaySourcePDF.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/LoadingSpinner.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/LogOut.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/Recommendations.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/ThemeToggle.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/components/UploadDocuments.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/pages/_app.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/pages/api/auth/[...nextauth].ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/pages/api/trpc/[trpc].ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/pages/chat.tsx",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/pages/index.tsx",["111","112"],[],"import { type NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport { signIn, signOut, useSession } from \"next-auth/react\";\n\nimport { api } from \"~/utils/api\";\n\nconst Home: NextPage = () => {\n  const hello = api.example.hello.useQuery({ text: \"\" });\n\n  return (\n    <>\n      <Head>\n        <title>Spect AI</title>\n        <meta name=\"description\" content=\"Generated by create-t3-app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-muddy\">\n        <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16 \">\n          <h1 className=\"text-7xl font-extrabold tracking-tight text-white\">\n            Spect <span className=\"bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 bg-clip-text text-transparent \">AI</span> \n          </h1>\n          <Link href=\"/chat\">\n          <button className=\"rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20\">\n            Try Now\n          </button>\n          </Link>\n          {/* <div className=\"flex flex-col items-center gap-2\">\n            <p className=\"text-2xl text-white\">\n              {hello.data ? hello.data.greeting : \"Loading tRPC query...\"}\n            </p>\n            <AuthShowcase />\n          </div> */}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n\nconst AuthShowcase: React.FC = () => {\n  const { data: sessionData } = useSession();\n\n  const { data: secretMessage } = api.example.getSecretMessage.useQuery(\n    undefined, // no input\n    { enabled: sessionData?.user !== undefined },\n  );\n\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4\">\n      <p className=\"text-center text-2xl text-white\">\n        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}\n        {secretMessage && <span> - {secretMessage}</span>}\n      </p>\n      <button\n        className=\"rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20\"\n        onClick={sessionData ? () => void signOut() : () => void signIn()}\n      >\n        {sessionData ? \"Sign out\" : \"Sign in\"}\n      </button>\n    </div>\n  );\n};\n","/Users/imenkedir/dev/web/Spect-AI/src/server/api/root.ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/server/api/routers/chat.ts",["113","114","115","116","117"],[],"import { z } from \"zod\";\n\nimport * as dotenv from \"dotenv\";\nimport { OpenAI } from \"langchain/llms/openai\";\nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";\nimport { PineconeClient } from \"@pinecone-database/pinecone\";\nimport { PineconeStore } from \"langchain/vectorstores/pinecone\";\nimport { LLMChain, loadQAStuffChain } from \"langchain/chains\";\nimport { PromptTemplate } from \"langchain/prompts\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { resolveHTTPResponse } from \"@trpc/server/http\";\n\nexport const chatRouter = createTRPCRouter({\n  askQuestion: publicProcedure\n    .input(\n      z.object({\n        messageId: z.string(),\n        userMessage: z.string(),\n        memory: z.array(z.string()),\n      })\n    )\n    .mutation(async ({ input }) => {\n      dotenv.config();\n      const model = new OpenAI({ temperature: 0 });\n      const client = new PineconeClient();\n      await client.init({\n        apiKey: process.env.PINECONE_API_KEY!,\n        environment: process.env.PINECONE_ENVIRONMENT!,\n      });\n      const pineconeIndex = client.Index(process.env.PINECONE_INDEX!);\n\n      const askTemplate = `Act as an AI assistant to a human asking a question related to construction. If you do not know the answer, truthfully say you do not know. You will have access to the chat history and some documents that may help you answer the question. You can also ask the human for more information.\\n\\nChat History:\\n{memory}\\nDocuments:\\n{documents}\\nHuman: {question}\\nAI Assistant:`;\n\n      const askPrompt = new PromptTemplate({\n        template: askTemplate,\n        inputVariables: [\"question\", \"memory\", \"documents\"],\n      });\n\n      const askChain = new LLMChain({\n        llm: model,\n        prompt: askPrompt,\n      });\n\n      const showSourcesTemplate = `Act as an AI that determines if the following documents contain information that is useful based on the question trying to be answered. Simply respond with \"true\" or \"false\". Do not respond in any other way. \n\n      Documents:\n      \"GMP Amendment” means an amendment to this Agreement that establishes the GMP or changes the GMP. Each approved GMP proposal is made part of this Agreement by a GMP Amendment.\n      The Contract Price is subject to adjustments under Article 6 and by GMP Amendment.\n      \n      Question: What is a GMP Contract?\n      AI Assistant: true\n      \n      Documents:\n      Date Answered\n      Answer\n      \n      Human: What day is it?\n      AI Assistant: false\n      \n      Documents:\n      CONTRACTOR shall establish principal axis lines of the building and site whereupon the SUBCONTRACTOR shall lay out and be strictly responsible for the accuracy of the SUBCONTRACTOR'S Work and for any loss or damage to CONTRACTOR or others by reason of SUBCONTRACTOR'S failure to set out or perform its work correctly.\n      Differing Site Conditions\n      \n      Human: Who is responsible for site inspections?\n      AI Assistant: true\n      \n      Documents:\n      {documents}\n      Human: {question}\n      AI Assistant:`;\n\n      const showSourcesPrompt = new PromptTemplate({\n        template: showSourcesTemplate,\n        inputVariables: [\"question\", \"documents\"],\n      });\n\n      const showSourcesChain = new LLMChain({\n        llm: model,\n        prompt: showSourcesPrompt,\n      });\n\n      const vectorStore = await PineconeStore.fromExistingIndex(\n        new OpenAIEmbeddings(),\n        { pineconeIndex }\n      );\n\n      const vsRes = await vectorStore.similaritySearchWithScore(input.userMessage, 5);\n\n      const simScores = vsRes.map((doc) => doc[1]);\n      const docs = vsRes.map((doc) => doc[0]);\n\n      const formatedDocs = docs.reduce(\n        (docs, doc) => docs + doc.pageContent + \"\\n\",\n        \"\"\n      );\n\n      const askResponse = await askChain.call({\n        question: input.userMessage,\n        memory: input.memory,\n        documents: formatedDocs,\n      });\n\n      const showSourcesResponse = await showSourcesChain.call({\n        question: input.userMessage,\n        documents: formatedDocs,\n      });\n\n      const rawPrompt = await askPrompt.format({\n        question: input.userMessage,\n        documents: formatedDocs,\n        memory: input.memory,\n      });\n\n      const newMemory = `Documents: ${formatedDocs}\\nHuman: ${\n        input.userMessage\n      }\\nAI Assistant: ${askResponse.text as string}`;\n\n      return {\n        messageId: input.messageId,\n        userMessage: input.userMessage,\n        spectMessage: askResponse.text as string,\n        spectSources: docs,\n        showSources: showSourcesResponse.text == \" true\" ? true : false,\n        newMemory: newMemory,\n        rawPrompt: rawPrompt,\n        socres: simScores,\n      };\n    }),\n});\n","/Users/imenkedir/dev/web/Spect-AI/src/server/api/routers/example.ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/server/api/trpc.ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/server/auth.ts",["118"],[],"import { type GetServerSidePropsContext } from \"next\";\nimport {\n  getServerSession,\n  type NextAuthOptions,\n  type DefaultSession,\n} from \"next-auth\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { env } from \"~/env.mjs\";\nimport { prisma } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      // ...other properties\n      // role: UserRole;\n    } & DefaultSession[\"user\"];\n  }\n\n  // interface User {\n  //   // ...other properties\n  //   // role: UserRole;\n  // }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authOptions: NextAuthOptions = {\n  callbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    /**\n     * ...add more providers here.\n     *\n     * Most other providers require a bit more work than the Discord provider. For example, the\n     * GitHub provider requires you to add the `refresh_token_expires_in` field to the Account\n     * model. Refer to the NextAuth.js docs for the provider you want to use. Example:\n     *\n     * @see https://next-auth.js.org/providers/github\n     */\n  ],\n};\n\n/**\n * Wrapper for `getServerSession` so that you don't need to import the `authOptions` in every file.\n *\n * @see https://next-auth.js.org/configuration/nextjs\n */\nexport const getServerAuthSession = (ctx: {\n  req: GetServerSidePropsContext[\"req\"];\n  res: GetServerSidePropsContext[\"res\"];\n}) => {\n  return getServerSession(ctx.req, ctx.res, authOptions);\n};\n","/Users/imenkedir/dev/web/Spect-AI/src/server/db.ts",[],[],"/Users/imenkedir/dev/web/Spect-AI/src/types/chat/message.ts",["119"],[],"export interface Message {\n  id: string;\n  userMessage: string;\n  spectMessage: string | undefined;\n  spectSources: any[] | undefined;\n  showSources: boolean | undefined;\n}\n","/Users/imenkedir/dev/web/Spect-AI/src/utils/api.ts",[],[],{"ruleId":"120","severity":1,"message":"121","line":9,"column":9,"nodeType":"122","messageId":"123","endLine":9,"endColumn":14},{"ruleId":"120","severity":1,"message":"124","line":42,"column":7,"nodeType":"122","messageId":"123","endLine":42,"endColumn":29},{"ruleId":"120","severity":1,"message":"125","line":8,"column":20,"nodeType":"122","messageId":"123","endLine":8,"endColumn":36},{"ruleId":"120","severity":1,"message":"126","line":12,"column":10,"nodeType":"122","messageId":"123","endLine":12,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":28,"column":17,"nodeType":"129","messageId":"130","endLine":28,"endColumn":46},{"ruleId":"127","severity":1,"message":"128","line":29,"column":22,"nodeType":"129","messageId":"130","endLine":29,"endColumn":55},{"ruleId":"127","severity":1,"message":"128","line":31,"column":42,"nodeType":"129","messageId":"130","endLine":31,"endColumn":69},{"ruleId":"120","severity":1,"message":"131","line":8,"column":10,"nodeType":"122","messageId":"123","endLine":8,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":5,"column":17,"nodeType":"134","messageId":"135","endLine":5,"endColumn":20,"suggestions":"136"},"@typescript-eslint/no-unused-vars","'hello' is assigned a value but never used.","Identifier","unusedVar","'AuthShowcase' is assigned a value but never used.","'loadQAStuffChain' is defined but never used.","'resolveHTTPResponse' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'env' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["137","138"],{"messageId":"139","fix":"140","desc":"141"},{"messageId":"142","fix":"143","desc":"144"},"suggestUnknown",{"range":"145","text":"146"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"145","text":"147"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[116,119],"unknown","never"]